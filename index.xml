<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Sahil Gandhi</title><link>https://sahil-crazy.github.io/</link><description>Recent content on Sahil Gandhi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>**[sahil-crazy.github.io](https://sahil-crazy.github.io/)**</copyright><lastBuildDate>Sat, 29 Apr 2023 13:26:36 -0400</lastBuildDate><atom:link href="https://sahil-crazy.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Scripting: Writing and executing Bash scripts to automate tasks</title><link>https://sahil-crazy.github.io/posts/scripting-bash/</link><pubDate>Sat, 29 Apr 2023 13:26:36 -0400</pubDate><guid>https://sahil-crazy.github.io/posts/scripting-bash/</guid><description>In this post, we&amp;rsquo;ll cover the basics of scripting using Bash, a popular shell used in Unix, Linux, and macOS environments. Bash scripts are a powerful way to automate tasks and can save you time and effort in performing repetitive tasks. We&amp;rsquo;ll explain the syntax and structure of a Bash script, including variables, loops, conditionals, and functions. We&amp;rsquo;ll also cover the use of command-line arguments and input/output redirection to make your scripts more versatile. We&amp;rsquo;ll provide examples of scripts that perform tasks such as creating backups, renaming files, and downloading files from the internet. We&amp;rsquo;ll also discuss best practices for writing and organizing your scripts, such as using comments and creating reusable functions. By the end of this post, you&amp;rsquo;ll have the knowledge to write your own Bash scripts to automate tasks and simplify your workflow.</description></item><item><title>File manipulation: Learning how to manipulate files using commands like cp, mv,â€¦</title><link>https://sahil-crazy.github.io/posts/file-manipulation-bash/</link><pubDate>Tue, 25 Apr 2023 18:39:56 -0400</pubDate><guid>https://sahil-crazy.github.io/posts/file-manipulation-bash/</guid><description>In this post, we&amp;rsquo;ll dive into file manipulation using command-line interface (CLI) commands such as cp (copy file or directory), mv (move or rename file or directory), rm (remove file or directory), mkdir (make directory), touch (create an empty file), cat (view file content), and grep (search for a pattern in a file). By mastering these commands, you can efficiently manipulate files and directories, such as copying, moving, renaming, deleting, and searching for specific content. We&amp;rsquo;ll provide examples to illustrate the syntax and usage of each command and show how they can be combined to perform more complex tasks. We&amp;rsquo;ll also cover the use of wildcards, such as * and ?, to perform actions on multiple files at once. Whether you&amp;rsquo;re working with a few files or hundreds, understanding these file manipulation commands can save you time and streamline your workflow.</description></item><item><title>Basic commands: Understanding basic commands like cd, ls, mkdir, rm, etc.</title><link>https://sahil-crazy.github.io/posts/basic_commands_bash/</link><pubDate>Sat, 22 Apr 2023 16:47:16 -0400</pubDate><guid>https://sahil-crazy.github.io/posts/basic_commands_bash/</guid><description>In this post, we&amp;rsquo;ll cover some of the most commonly used basic commands in command-line interface (CLI) environments such as Unix, Linux, and macOS. These commands include cd (change directory), ls (list directory contents), mkdir (make directory), rm (remove file or directory), cp (copy file or directory), mv (move or rename file or directory), touch (create an empty file), cat (view file content), and echo (display a line of text). By understanding and mastering these commands, you can navigate and manipulate the file system with ease, and increase your productivity and efficiency in using the command line. We&amp;rsquo;ll explain the syntax and usage of each command and provide examples to illustrate their functions.</description></item><item><title>Comptia A+ Core 1</title><link>https://sahil-crazy.github.io/posts/comptia-a+-core-1/</link><pubDate>Wed, 15 Mar 2023 10:28:32 -0400</pubDate><guid>https://sahil-crazy.github.io/posts/comptia-a+-core-1/</guid><description>The CompTIA A+ Core 1 (220-1101) certification is a vendor-neutral certification that validates your knowledge and ability to conduct install, configure, and troubleshoot hardware issues in your organization. This certification tests your ability to think on your feet while performing critical IT support functions. The CompTIA A+ certification is designed for early-career data analysts with the equivalent of 9-12 months of on-the-job knowledge. The CompTIA A+ Core 1 exam is focused on hardware and mobile device support in order to support a wide variety of different devices used by a diverse and global workforce. CompTIA A+ Core 1 (220-1101) is an early-career IT support technician certification covering the theory and technical skills required to support computer hardware, mobile devices, networks, virtualization, and cloud computing environments.</description></item></channel></rss>